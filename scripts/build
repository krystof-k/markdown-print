#!/bin/bash

# Variables
# - Directories
content_dir="./content"
chapters_dir="$content_dir/chapters"
references_dir="$content_dir/references"
scripts_dir="./scripts"
pandoc_dir="$scripts_dir/pandoc"
output_dir="./output"
# - Files
template_file="$pandoc_dir/template.latex"
tmp_file="$output_dir/.tmp"
source_file=$tmp_file
output_file="$output_dir/prejmenovat.pdf"
# - Colors
red_color='\033[0;31m'
yellow_color='\033[0;33m'
no_color='\033[0m' # No Color

# Check if chapters directory exists and contains at least one file
if [ ! -d "$chapters_dir" ]; then
  echo -e "${red_color}Error:${no_color} Chapters directory '$chapters_dir' doesn't exist."
  exit 1
elif [ `ls "$chapters_dir" | wc -l` == 0 ]; then
  echo -e "${red_color}Error:${no_color} Chapters directory '$chapters_dir' is empty."
  exit 1
fi

# Ensure output directory exists, if not, create it
mkdir -p $output_dir

# Merge all chapters into .tmp
for file in $chapters_dir/*;
do
  (cat "${file}"; echo;) >> $tmp_file
done

# Check that references directory exists and is not empty
if [ ! -d "$references_dir" ]; then
  bibliography=""
  echo -e "${yellow_color}Warning:${no_color} References directory '$references_dir' doesn't exist."
elif [ `ls "$references_dir" | wc -l` == 0 ]; then
  bibliography=""
  echo -e "${yellow_color}Warning:${no_color} References directory '$references_dir' is empty."
else
  # Create reference files list
  # a) Check if there are multiple files
  # b) List all files in references directory
  # c) Convert newlines to commas
  # d) Remove trailing comma
  # e) Convert commas to --bibliography
  # f) Prepend --bibliography
  count=`ls "$references_dir" | wc -l`
  if [ $count != 1 ]; then
    references_files=$(find $references_dir/* | tr '\n' ',' | sed s'/,$//' | sed s'/,/ --bibliography /g')
  elif [ $count = 1 ]; then
    references_files=$(find $references_dir/*)
  fi
  bibliography="--bibliography "$references_files
fi

eval "pandoc -s\
  --template $template_file\
  --number-sections \
  --filter pandoc-citeproc\
  $bibliography\
  $source_file -o $output_file"

# Clean
rm $tmp_file
